import os
import subprocess
import logging
import requests
import re
import json
import socket
import time

# Günlükleme yapılandırması
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def execute_command(command, capture_output=True):
    """Komutları çalıştırır ve çıktıyı döndürür."""
    try:
        result = subprocess.run(command, shell=True, capture_output=capture_output, text=True)
        if result.returncode == 0:
            logging.info("Komut çalıştırıldı: %s", command)
            if capture_output:
                logging.info("Çıktı: %s", result.stdout)
        else:
            logging.warning("Komut çalıştırılamadı: %s", command)
            logging.warning("Hata: %s", result.stderr)
    except Exception as e:
        logging.error(f"Komut çalıştırılırken hata oluştu: {e}")

def check_sudo_privileges():
    """Sudo yetkilerini kontrol eder."""
    logging.info("Sudo yetkileri kontrol ediliyor...")
    execute_command('sudo -l')

def check_suid_binaries():
    """SUID binariyalarını kontrol eder."""
    logging.info("SUID binariyaları kontrol ediliyor...")
    execute_command('find / -perm -4000 -type f 2>/dev/null')

def check_world_writable_files():
    """Dünya tarafından yazılabilir dosyaları kontrol eder."""
    logging.info("Dünya tarafından yazılabilir dosyalar kontrol ediliyor...")
    execute_command('find / -writable -type f 2>/dev/null')

def check_scheduled_tasks():
    """Planlanmış görevleri kontrol eder."""
    logging.info("Planlanmış görevler kontrol ediliyor...")
    execute_command('crontab -l 2>/dev/null')
    execute_command('ls -la /etc/cron* 2>/dev/null')

def check_security_patches():
    """Güvenlik yamalarını kontrol eder."""
    logging.info("Güvenlik yamaları kontrol ediliyor...")
    execute_command('uname -a')
    execute_command('cat /etc/os-release')
    execute_command('dpkg --list | grep -i security')  # Debian/Ubuntu tabanlı sistemler
    execute_command('yum list updates --security')  # RedHat/CentOS tabanlı sistemler

def check_file_permissions():
    """Dosya izinlerini kontrol eder ve olağandışı izinleri listeler."""
    logging.info("Dosya izinleri kontrol ediliyor...")
    execute_command('find / -type f -exec ls -l {} \; | awk \'$1 ~ /w/ {print $0}\' 2>/dev/null')

def check_network_exposures():
    """Ağ üzerinden açık portları ve hizmetleri kontrol eder."""
    logging.info("Ağ üzerindeki açık portlar kontrol ediliyor...")
    execute_command('netstat -tuln')

def check_sensitive_files():
    """Gizli dosyaları ve konfigürasyon dosyalarını kontrol eder."""
    logging.info("Gizli dosyalar kontrol ediliyor...")
    sensitive_files = [
        '/etc/passwd',
        '/etc/shadow',
        '/etc/ssh/sshd_config',
        '/root/.bash_history',
    ]
    for file in sensitive_files:
        if os.path.exists(file):
            logging.info("Gizli dosya bulundu: %s", file)
            execute_command(f'cat {file}')

def check_for_vulnerable_packages():
    """Güvenlik açıkları bulunan paketleri kontrol eder."""
    logging.info("Güvenlik açıkları bulunan paketler kontrol ediliyor...")
    execute_command('apt list --upgradable 2>/dev/null')  # Debian/Ubuntu tabanlı sistemler
    execute_command('yum list updates 2>/dev/null')  # RedHat/CentOS tabanlı sistemler

def check_network_service_security(url):
    """Ağ hizmetlerinin güvenliğini kontrol eder."""
    logging.info("Ağ hizmetlerinin güvenliği kontrol ediliyor...")
    try:
        response = requests.get(f"{url}/services")
        if response.status_code == 200:
            services = response.json()
            logging.info("Ağ hizmetleri bulundu: %s", services)
            for service in services:
                logging.info("Servis kontrolü: %s", service)
                # Detaylı servis güvenlik testleri burada yapılabilir
        else:
            logging.warning("Ağ hizmetleri kontrolü başarısız. Sunucu yanıtı: %s", response.status_code)
    except requests.RequestException as e:
        logging.error(f"Ağ hizmetleri kontrolü sırasında hata oluştu: {e}")

def check_exposed_management_interfaces(url):
    """Yönetim arayüzlerinin güvenliğini kontrol eder."""
    logging.info("Yönetim arayüzlerinin güvenliği kontrol ediliyor...")
    management_interfaces = [
        '/admin',
        '/manage',
        '/console',
        '/admin/login',
        '/admin/dashboard'
    ]
    for interface in management_interfaces:
        try:
            response = requests.get(f"{url}{interface}")
            if response.status_code == 200:
                logging.info("Yönetim arayüzü bulundu: %s", interface)
                logging.info("Yanıt: %s", response.text[:500])  # İlk 500 karakteri al
            else:
                logging.warning("Yönetim arayüzü bulunamadı: %s", interface)
        except requests.RequestException as e:
            logging.error(f"Yönetim arayüzü kontrolü sırasında hata oluştu: {e}")

def check_file_inclusions(url):
    """Dosya dahil etme açıklarını kontrol eder."""
    logging.info("Dosya dahil etme açıkları kontrol ediliyor...")
    file_inclusions = [
        '/etc/passwd',
        '/etc/shadow',
        '/proc/self/environ',
        '/proc/self/cmdline'
    ]
    for file in file_inclusions:
        try:
            response = requests.get(f"{url}?file={file}")
            if response.status_code == 200:
                logging.info("Dosya dahil etme açığı bulundu: %s", file)
                logging.info("İçerik: %s", response.text[:500])  # İlk 500 karakteri al
            else:
                logging.warning("Dosya dahil etme açığı bulunamadı: %s", file)
        except requests.RequestException as e:
            logging.error(f"Dosya dahil etme kontrolü sırasında hata oluştu: {e}")

def test_advanced_file_exfiltration(url):
    """Gelişmiş dosya sızdırma açıklarını test eder."""
    logging.info("Gelişmiş dosya sızdırma açıkları kontrol ediliyor...")
    sensitive_files = [
        '/etc/passwd',
        '/etc/shadow',
        '/var/log/auth.log',
        '/var/log/syslog'
    ]
    for file in sensitive_files:
        try:
            response = requests.get(f"{url}?file={file}")
            if response.status_code == 200:
                logging.info("Dosya sızdırma açığı bulundu: %s", file)
                logging.info("İçerik: %s", response.text[:1000])  # İlk 1000 karakteri al
            else:
                logging.warning("Dosya sızdırma açığı bulunamadı: %s", file)
        except requests.RequestException as e:
            logging.error(f"Dosya sızdırma kontrolü sırasında hata oluştu: {e}")

def test_advanced_path_traversal(url):
    """Gelişmiş yol geçişi açıklarını test eder."""
    logging.info("Gelişmiş yol geçişi açıkları kontrol ediliyor...")
    payloads = [
        '../../etc/passwd',
        '../../etc/shadow',
        '../../var/log/auth.log'
    ]
    for payload in payloads:
        try:
            response = requests.get(f"{url}?file={payload}")
            if response.status_code == 200:
                logging.info("Yol geçişi açığı bulundu: %s", payload)
                logging.info("İçerik: %s", response.text[:500])  # İlk 500 karakteri al
            else:
                logging.warning("Yol geçişi açığı bulunamadı: %s", payload)
        except requests.RequestException as e:
            logging.error(f"Yol geçişi kontrolü sırasında hata oluştu: {e}")

def main():
    global url
    url = input("Test edilecek URL'i girin: ")
    
    # Güvenlik Testleri
    check_sudo_privileges()
    check_suid_binaries()
    check_world_writable_files()
    check_scheduled_tasks()
    check_security_patches()
    check_file_permissions()
    check_network_exposures()
    check_sensitive_files()
    check_for_vulnerable_packages()
    check_network_service_security(url)
    check_exposed_management_interfaces(url)
    check_file_inclusions(url)
    test_advanced_file_exfiltration(url)
    test_advanced_path_traversal(url)

if __name__ == "__main__":
    main()
